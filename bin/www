#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('chatroom-socker-io:server')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const io = require('socket.io')(server)

let userCounter = 0

io.on('connection', socket => {
  let isUserAdded = false

  socket.broadcast.emit('hi')
  console.log('New client connected')
  socket.on('add user', userName => {
    if (isUserAdded) return
    socket.userName = userName
    isUserAdded = true
    userCounter += 1
    console.log(userName)

    socket.broadcast.emit('user joined', {
      userName: socket.userName,
      userCounter
    })
  })

  socket.on('new message', data => {
    const { userName, message } = data
    console.log(userName, message)
    socket.broadcast.emit('new message', {
      userName: data.userName,
      message: data
    })
  })

  socket.on('disconnect', () => {
    console.log('Client disconnected')
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`'listening on *:${port}`))

server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
